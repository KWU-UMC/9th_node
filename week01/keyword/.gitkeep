- 외래키
    
    **정의:**
    
    한 테이블의 컬럼이 다른 테이블의 기본 키(PK)를 참조하는 키. 테이블 간의 관계를 맺어주는 연결고리 역할을 수행함.
    
    **핵심 속성(제약 조건):**
    
    참조 무결성: 외래 키는 참조하는 부모 테이블의 기본 키에 존재하는 값이거나, null값이어야 함. 즉, 존재하지 않는 '유령 데이터'를 참조할 수 없음.
    
    → 외래키는 관계의 신뢰성을 보장하기 위해 필요함. 예를 들어 수강신청 기록은 반드시 실존하는 학생에 의해 이루어져야한다는 규칙을 강제하기에 데이터는 일관성을 유지하고, 현실세계의 논리적 관계를 그대로 데이터베이스에 반영할 수 있게 됨.
- 기본키
    
    **정의:**
    
    테이블 내의 각 행(Row)을 유일하게 식별할 수 있는 값을 가진 컬럼 또는 컬럼들의 조합.
    
    **핵심 속성(제약 조건):**
    
    유일성(Uniqueness), 최소성(Minimality), 개체 무결성(Not Null). 테이블 내에서 절대 중복될 수 없으며, 반드시 값을 가져야 함.
    → 기본키는 데이터의 '신분증'과 같음. 이름은 같을 수 있어도 각자를 구분하는 주민등록번호가 있는 것처럼, 기본키가 있어야 수많은 데이터 속에서 원하는 특정 데이터를 정확히 찾아 수정하거나 삭제할 수 있음.
    - ER 다이어그램
    
    **정의:**
    
    데이터베이스의 구조를 시각적으로 표현한 설계도. 데이터(개체), 데이터의 속성, 데이터 간의 관계를 한눈에 파악할 수 있게 함.
    
    **핵심 요소:**
    
    개체(Entity), 속성(Attribute), 관계(Relationship). 이 세 가지 요소를 사용하여 시스템의 데이터 구조를 논리적으로 모델링함.
    → ER 다이어그램은 집을 짓기 전의 '청사진'이다. 설계도 없이 집을 지으면 구조가 엉망이 되듯, ERD 없이 데이터베이스를 구축하면 데이터 중복과 불일치 문제가 발생하기 쉽다. 개발자와 설계자 간의 중요한 소통 도구이기도 함.
    
- 복합 키
    
    **정의:**
    
    두 개 이상의 컬럼을 조합하여 하나의 기본 키(PK)를 만드는 것.
    
    **핵심 속성(제약 조건):**
    
    단일 컬럼만으로는 행의 유일성을 보장할 수 없을 때 사용됨. 키를 구성하는 모든 컬럼의 조합이 테이블 내에서 유일해야 함.
    → 복합 키는 '어떤 학생'이 '어떤 과목'을 수강했는지와 같이, 두 개 이상의 조건이 결합되어야만 하나의 특정 상황을 정의할 수 있을 때 사용됨. 주로 테이블 간의 다대다(N:M) 관계를 해소하기 위한 연결 테이블에서 기본 키로 활용됨.
    
- 연관관계
    
    **정의:**
    
    테이블(개체)들 사이의 논리적인 연결을 의미하며, 주로 외래 키를 통해 구현됨.
    
    **핵심 종류:**
    
    1:1 (일대일), 1:N (일대다), N:M (다대다). 특히 N:M 관계는 물리적으로 직접 구현할 수 없어, 중간에 두 테이블을 1:N 관계로 연결해주는 '연결 테이블'을 필요로 함.
    → 연관관계는 흩어져 있는 데이터에 '맥락'과 '의미'를 부여하는 문법과 같음. 관계 설정이 없다면 데이터는 단순한 값의 나열일 뿐이지만, 관계를 통해 '부서에 소속된 사원', '학생이 수강하는 과목'처럼 유의미한 정보 시스템이 됨.
    
- 정규화
    
    **정의:**
    
    데이터의 중복을 최소화하고 무결성을 향상시키기 위해, 정해진 규칙에 따라 테이블을 분해하는 과정. 데이터 변경 시 발생하는 이상 현상(Anomaly)을 방지하는 것이 주 목적임.
    
    **핵심 속성(정보처리 실기 핵심):**
    
    1NF(원자값), 2NF(부분 함수 종속 제거), 3NF(이행 함수 종속 제거), BCNF(결정자이면서 후보키가 아닌 것 제거) 등의 단계적 규칙을 적용하여 테이블 구조를 개선함.
    → 정규화는 잘 정리된 '서랍장'을 만드는 과정. 종류별로 물건을 나눠 담아 중복 구매를 막고(중복 최소화), 관리를 쉽게 만드는 것과 같음. 데이터 구조를 논리적이고 깔끔하게 만들어 장기적인 유지보수를 용이하게 하는 필수 설계 단계.
    
    [정보처리 실기_데이터베이스06강_정규화](https://youtu.be/RXQ1kZ_JHqg?si=f0OPsoOWnJXSbqca)
    
- 반 정규화
    
    **정의:**
    
    정규화된 테이블에 대해, 시스템의 조회 성능 향상을 목적으로 의도적으로 데이터 중복을 허용하거나 테이블을 통합하는 기법.
    
    **핵심 속성(제약 조건):**
    
    읽기(SELECT) 성능은 향상되지만, 데이터 저장 공간이 낭비되고 입력/수정/삭제 시 데이터 불일치가 발생할 수 있어 일관성 유지가 어려워짐.
    → 반정규화는 서랍장에 잘 정리된 옷 중에서 '내일 당장 입을 옷을 미리 꺼내 의자에 걸어두는 것'과 같다. 아침에 찾는 시간(JOIN)을 줄여 매우 빠르지만, 방이 어수선해지고(중복) 다른 옷을 입고 싶을 때 다시 정리해야 하는(관리 복잡성) 비용이 따름. 반드시 정규화 이후, 성능 개선이 필요한 부분에 한해 신중하게 적용해야 함.